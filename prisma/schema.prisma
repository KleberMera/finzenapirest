// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id                Int                @id @default(autoincrement())
  rol_id            Int
  role              Role               @relation(fields: [rol_id], references: [id])
  name              String?
  last_name         String?
  username          String?            @unique
  email             String?            @unique
  password          String?
  phone             String?
  avatar            String?
  firebaseUid       String?            @unique
  status            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  categories        Category[]
  debts             Debt[]
  goals             Goal[]
  devices           Device[]
  verificationCodes VerificationCode[]
  salary_history    SalaryHistory[]
  notifications     Notification[]
  strategyPlans     StrategyPlan[]
}

model Device {
  id                      Int                      @id @default(autoincrement())
  user_id                 Int
  user                    User                     @relation(fields: [user_id], references: [id])
  os                      String?
  browser                 String?
  isMobile                Boolean                  @default(false)
  userAgent               String?
  brand                   String?
  model                   String?
  status                  String                   @default("Active")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  notificationPreferences NotificationPreference[] // Nueva relación
}

model NotificationPreference {
  id           Int      @id @default(autoincrement())
  device_id    Int? // Nuevo campo
  device       Device?  @relation(fields: [device_id], references: [id]) // Nueva relación
  pushEnabled  Boolean  @default(false)
  subscription String?
  daysBeforeNotify Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  user_id   Int
  user      User     @relation(fields: [user_id], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  debt_id   Int?
  debt      Debt?    @relation(fields: [debt_id], references: [id])
  recurringTransactionId Int? // Relación opcional con transacciones recurrentes
  recurringTransaction RecurringTransaction? @relation(fields: [recurringTransactionId], references: [id])
  date      String? // Fecha de la notificación
  time      String? // Hora de la notificación
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique // Código de verificación (ej. "X7K9P2")
  userId    Int // Relación con el usuario
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime // Fecha de expiración (ej. 15 minutos después de creado)
  isUsed    Boolean  @default(false) // Para marcar si ya se usó
}

model Debt {
  id               Int            @id @default(autoincrement())
  user_id          Int
  user             User           @relation(fields: [user_id], references: [id])
  name             String?
  description      String?
  amount           Decimal?
  interest_rate    Decimal?
  duration_months  Int?
  method           String?
  duration_type    String?        @default("months")
  start_date       String?
  end_date         String?
  status           String?        @default("Pendiente")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  amortizations    Amortization[]
  notifications    Notification[]
}

model Amortization {
  id            Int      @id @default(autoincrement())
  debt_id       Int
  debt          Debt     @relation(fields: [debt_id], references: [id])
  number_months Int?
  date          String?
  quota         Decimal?
  interest      Decimal?
  amortized     Decimal?
  outstanding   Decimal?
  payment_date  String?
  status        String?  @default("Pendiente")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id           Int           @id @default(autoincrement())
  user_id      Int
  user         User          @relation(fields: [user_id], references: [id])
  name         String?
  icon         String?
  type         String        @default("Ingreso")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Transaction {
  id                Int                   @id @default(autoincrement())
  category_id       Int
  category          Category              @relation(fields: [category_id], references: [id])
  name              String?
  description       String?
  amount            Decimal
  date              String
  time              String?
  receiptImageS3Key String? // Clave del objeto en S3 para el recibo
  isRecurring       Boolean               @default(false)
  recurringConfig   RecurringTransaction? // Relación uno a uno
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model RecurringTransaction {
  id                    Int         @id @default(autoincrement())
  transaction           Transaction @relation(fields: [transactionId], references: [id])
  transactionId         Int         @unique // Relación uno a uno con Transaction
  frequency             String // "Mensual", "Semanal", "Diario", "Quincenañ".
  nextExecutionDate     String
  endDate               String?
  dayOfMonth            Int? // Para transacciones mensuales (día del mes)
  lastExecuted          String? // Última vez que se generó una transacción
  generatedTransactions Int         @default(0) // Contador de transacciones generadas
  isActive              Boolean     @default(true) // Estado de activación
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  notifications         Notification[] // Relación con notificaciones
}

model Goal {
  id            Int            @id @default(autoincrement())
  user_id       Int
  user          User           @relation(fields: [user_id], references: [id])
  name          String
  description   String?
  target_amount Decimal // Monto objetivo
  deadline      String? // Fecha límite para alcanzar la meta
  start_date    String? // Fecha de inicio
  status        String         @default("Active") // Active, Completed, Cancelled
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contributions     GoalContribution[] // Relación con los aportes
}

model GoalContribution {
  id        Int      @id @default(autoincrement())
  goal_id   Int
  goal      Goal     @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  amount    Decimal // Monto aportado en este seguimiento
  note      String? // Nota opcional del aporte (ej: "Primer aporte")
  date      String  // Fecha de Aporte
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalaryHistory {
  id             Int      @id @default(autoincrement())
  user_id        Int
  user           User     @relation(fields: [user_id], references: [id])
  salary_amount  Decimal // Monto del sueldo
  effective_date String // Fecha de entrada en vigor
  month_name     String // Nombre del mes (ej. "Enero", "Febrero")
  description    String? // Descripción opcional
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StrategyPlan {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  datajson  String?
  dateCreated String?
  timeCreated String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
